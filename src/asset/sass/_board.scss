
// @media screen and (max-width: 500px) {
//     $random: red;
// }
// @media screen and (min-width: 500px) {
//     $random: orange;
// }
// #root {
//     background-color: $random;
// }

.z-index-1 {
    z-index: 1;
}
.fizzle {
    transition: opacity 2s;
    opacity: 0;
}
.dead {
    display: none;
}

.unclickable {
    pointer-events: none;
}
.clickable {
    pointer-events: auto;
}
.rotate180 {
    transform: rotate(180deg);
}
///////////////////////////////////////////BOARD//////////////////////////////////////////////////////////////////
.board-grid-container {

   --board-dimension-limit: calc(100vh - var(--header-height) - var(--game-text-height));//540px 520px //we're stopping it when board's bottom reaches 'fold'. 

    @mixin test() {
        @if (var(--board-dimension-limit) > 500px) {
            color: orange;
        }
    }

    @include test();

    width: 100vw; max-width: var(--board-dimension-limit);
    height: 100vw; max-height: var(--board-dimension-limit);
    display: grid;//display: inline-grid;
    grid-template-columns: repeat(8, 1fr);
    grid-template-rows: repeat(8, 1fr);
    > div {
        line-height: calc(var(--board-height) * 0.125);//12.5vw;
        font-size: calc((var(--board-height) * 0.125) * 1.5);//18.75;
        background-color: $light-square;
        text-align: center;
    }
    > .black-square {
        background-color: $dark-square;
    }
    > .potentialUserSquare {
        background-image: linear-gradient(to bottom right, $potential-user-square 25%, transparent 25% 100%);
    }
    > .potentialClickedOnPieceSquare {
        background-color: $potential-clicked-on-piece-square;
    }
    > .potentialOpponentSquare {
        background-image: linear-gradient(to bottom right, transparent 75%, $potential-opponent-square 75% 100%);
    }
    > .potentialUserAndOpponentSquare {
        background-image: linear-gradient(to bottom right, $potential-user-square 25%, transparent 25% 100%), linear-gradient(to bottom right, transparent 75%, $potential-opponent-square 75% 100%);//linear-gradient(to bottom right, white,yellow);
    }
    ///////////////////////////////////////////PIECES//////////////////////////////////////////////////////////////////
    > div > div {
        height: 100%;//🐉why did we need this? (we do)
        overflow: hidden;
    }
    .white-piece {
        color: $white-piece;
    }
    .black-piece {
        color: $black-piece;
    }
    .highlighted {
        color: $clicked-on-piece;
    }
    .pawn {
        font-size: calc((var(--board-height) * 0.125) * 1.2);//15vw
    }
}

.pawn-promotion-grid-container {
    background-color: $light-grey;
    @media screen and (max-width: 500px) {
        width: 100vw;
        height: auto;
        @include grid-container-horizontally-and-vertically-center-GIs(repeat(auto-fit, minmax(33.3%, 1fr)), repeat(auto-fit, minmax(80px, 1fr)));
        > * {
            line-height: 12.5vw;
            font-size: 18.75vw;
            overflow: hidden;
        }
    }
    &-color-white {
        color: white;
    }
    &-color-black {
        color: black;
    }
}
.pawn-promotion-title {
    height: 80px;
    @include grid-container-horizontally-and-vertically-center-GIs();
}
.pawn-promotion-exit-button {
    height: 80px;
    // border-top: dotted $light-square 1px;
    // border-radius: 50% 50% 50% 50% / 100% 100% 0% 0% ;
    @include grid-container-horizontally-and-vertically-center-GIs();
    > * {
        @include grid-container-horizontally-and-vertically-center-GIs();
        height: 100%;
        width: 10%;
    }
}
///////////////////////////////////////////TRASH|MISC//////////////////////////////////////////////////////////////////
//make white squares
// .board-grid-container > div:nth-child(n+2):nth-child(-n+8):nth-child(even),
// .board-grid-container > div:nth-child(n+9):nth-child(-n+15):nth-child(odd),
// .board-grid-container > div:nth-child(n+18):nth-child(-n+24):nth-child(even),
// .board-grid-container > div:nth-child(n+25):nth-child(-n+31):nth-child(odd),
// .board-grid-container > div:nth-child(n+34):nth-child(-n+40):nth-child(even),
// .board-grid-container > div:nth-child(n+41):nth-child(-n+47):nth-child(odd),
// .board-grid-container > div:nth-child(n+50):nth-child(-n+56):nth-child(even),
// .board-grid-container > div:nth-child(n+57):nth-child(-n+63):nth-child(odd) {
//     background-color: white;
// }